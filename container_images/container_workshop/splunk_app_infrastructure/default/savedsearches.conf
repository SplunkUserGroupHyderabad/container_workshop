[Daily license usage]
search =  index=_internal source=*license_usage.log* type="Usage" | eval _time=_time - 43200 | eval idx=if(len(idx)=0 OR isnull(idx),"(UNKNOWN)",idx) | bin _time span=1d | stats sum(b) as b by _time, idx  | timechart span=1d sum(b) AS volumeB by idx | fields - _timediff  | foreach * [eval <<FIELD>>=round('<<FIELD>>'/1024/1024/1024, 3)] | eval time=strftime(_time,"%m/%d") | table time em_metrics main
enableSched=1
cron_schedule = 0 */1 * * *
dispatch.ttl = 3600
dispatch.earliest_time = -10d@d
dispatch.latest_time = @h
## Update the cache on the hour

[OS type telemetry]
search = | inputlookup em_entities \
  | rename dimensions.os AS osTypes \
  | stats count by osTypes \
  | eval salted_os_type="Infra_Insights" . osTypes, hashed_os_types=sha256(salted_os_type) \
  | rename hashed_os_types as data.os_name, count as data.os_count \
  | makejson name data.* output=event
action.outputtelemetry                     = 1
action.outputtelemetry.param.anonymous     = 1
action.outputtelemetry.param.support       = 0
action.outputtelemetry.param.license       = 0
action.outputtelemetry.param.optinrequired = 3
action.outputtelemetry.param.component     = app.sii.os_type
action.outputtelemetry.param.input         = event
action.outputtelemetry.param.type          = aggregate
enableSched=1
cron_schedule = 0 22 * * *
dispatch.earliest_time = -1d

[App Version telemetry]
search = | rest /services/apps/local \
  | search disabled=0 label="Splunk App for Infrastructure" \
  | rename label as data.app_name, version as data.app_version \
  | makejson name data.* output=event
enableSched=1
action.outputtelemetry                     = 1
action.outputtelemetry.param.anonymous     = 1
action.outputtelemetry.param.support       = 0
action.outputtelemetry.param.license       = 0
action.outputtelemetry.param.optinrequired = 3
action.outputtelemetry.param.component     = app.sii.app_version
action.outputtelemetry.param.input         = event
action.outputtelemetry.param.type          = aggregate
cron_schedule = 0 22 * * *
dispatch.earliest_time = -1d

[Alert definition telemetry]
search =  | rest /servicesNS/-/-/saved/searches \
  | search eai:acl.app="splunk_app_infrastructure" action.em_write_alerts = 1 \
  | rex field=search "metric_name\=\"(?<metric_name>[^\"]*)" \
  | rex field=search "aggregation_method\=\"(?<aggregation_method>[^\"]*)" \
  | eval salted_alert_title= "Infra_Insights" . title, hashed_alert_title=sha256(salted_alert_title) \
  | rename hashed_alert_title as data.hashed_alert_title, metric_name as data.alert_metric_name, aggregation_method as data.alert_aggregation_method \
  | makejson name data.* output=event
enableSched=1
action.outputtelemetry                     = 1
action.outputtelemetry.param.anonymous     = 1
action.outputtelemetry.param.support       = 0
action.outputtelemetry.param.license       = 0
action.outputtelemetry.param.optinrequired = 3
action.outputtelemetry.param.component     = app.sii.alert_definitions
action.outputtelemetry.param.input         = event
action.outputtelemetry.param.type          = aggregate
cron_schedule = 0 22 * * *
dispatch.earliest_time = -1d

[Group definition telemetry]
search = | inputlookup em_groups \
| makemv delim="," filter \
| mvexpand filter \
| rex field=filter "(?<dimension_key>.*)\=(?<dimension_value>.*)" \
| eval salted_dimension_value= "Infra_Insights" . dimension_value, \
  salted_dimension_key= "Infra_Insights" . dimension_key, \
  salted_group_title= "Infra_Insights" . title, \
  hashed_dim_key=sha256(salted_dimension_key), \
  hashed_dim_value=sha256(salted_dimension_value), \
  hashed_group_title=sha256(salted_group_title), \
  filtered=if(in(dimension_key,"ImageId","InstanceId", "os", "os_version", "ip", "host", "VolumeId", "LoadBalancerName"), dimension_key,""), \
  hashed_dim_key=if(filtered != "", filtered, hashed_dim_key) \
| rename hashed_dim_key as data.dimension_key, hashed_dim_value as data.dimension_value, hashed_group_title as data.group_title \
| stats list(data.*) as data.* by data.group_title \
| makejson name data.* output=event
enableSched=1
action.outputtelemetry                     = 1
action.outputtelemetry.param.anonymous     = 1
action.outputtelemetry.param.support       = 0
action.outputtelemetry.param.license       = 0
action.outputtelemetry.param.optinrequired = 3
action.outputtelemetry.param.component     = app.sii.group_definitions
action.outputtelemetry.param.input         = event
action.outputtelemetry.param.type          = aggregate
cron_schedule = 0 22 * * *
dispatch.earliest_time = -1d
